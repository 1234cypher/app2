#!/usr/bin/env python
"""
Script de configuration initiale du projet LinguaChat AI
"""
import os
import sys
import subprocess
import shutil

def run_command(command, description):
    """Ex√©cute une commande avec gestion d'erreur"""
    print(f"üîÑ {description}...")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode == 0:
        print(f"‚úÖ {description} - Termin√©")
        return True
    else:
        print(f"‚ùå {description} - Erreur: {result.stderr}")
        return False

def create_env_file():
    """Cr√©e le fichier .env s'il n'existe pas"""
    if not os.path.exists('.env'):
        if os.path.exists('.env.example'):
            shutil.copy('.env.example', '.env')
            print("‚úÖ Fichier .env cr√©√© √† partir de .env.example")
            print("‚ö†Ô∏è  N'oubliez pas de remplir vos cl√©s API dans le fichier .env")
        else:
            print("‚ùå Fichier .env.example non trouv√©")
    else:
        print("‚ÑπÔ∏è  Le fichier .env existe d√©j√†")

def setup_project():
    """Configuration compl√®te du projet"""
    print("üöÄ Configuration de LinguaChat AI")
    print("=" * 50)
    
    # Cr√©er les dossiers n√©cessaires
    directories = ['static/css', 'static/js', 'media', 'logs']
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"üìÅ Dossier cr√©√©: {directory}")
    
    # Cr√©er le fichier .env
    create_env_file()
    
    # Installation des d√©pendances
    if not run_command("pip install -r requirements.txt", "Installation des d√©pendances Python"):
        print("‚ùå √âchec de l'installation des d√©pendances")
        return False
    
    # Migrations de base de donn√©es
    if not run_command("python manage.py makemigrations", "Cr√©ation des migrations"):
        print("‚ùå √âchec de la cr√©ation des migrations")
        return False
    
    if not run_command("python manage.py migrate", "Application des migrations"):
        print("‚ùå √âchec de l'application des migrations")
        return False
    
    # Collecte des fichiers statiques
    run_command("python manage.py collectstatic --noinput", "Collecte des fichiers statiques")
    
    # Cr√©ation des donn√©es initiales
    run_command("python manage.py create_badges", "Cr√©ation des badges initiaux")
    run_command("python manage.py create_challenges", "Cr√©ation des d√©fis initiaux")
    
    print("\nüéâ Configuration termin√©e!")
    print("\nüìã Prochaines √©tapes:")
    print("1. Configurez vos cl√©s API dans le fichier .env")
    print("2. Cr√©ez un superutilisateur: python manage.py createsuperuser")
    print("3. Lancez le serveur: python manage.py runserver")
    print("4. Lancez Redis pour les WebSockets et Celery")
    print("5. Lancez Celery worker: celery -A linguachat worker -l info")
    print("6. Lancez Celery beat: celery -A linguachat beat -l info")
    
    return True

if __name__ == '__main__':
    setup_project()